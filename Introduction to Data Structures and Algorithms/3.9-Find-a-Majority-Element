// Problem:

// Given an array of numbers, return its majority element.

// The majority element is the value in the array that appears
// as at least half of the elements in the array.

// It is guaranteed that only one majority element exists in the array.

// Rules:
//      Explicit Requirements:
//        - Guaranteed that majority element exists in array.

//      Implicit Requirements:
//        - Input array contains positive integers.
//        - Arrays will have at least 3 elements.

// Input:
//  - Array of integers.

// Output:
//  - Single integer.


// Questions:
//  - Can the numbers be floats?
//  - Can the numbers be non-negative?
//  - How do you deal with situation where input array has less than 3
//    numbers i.e. empty array, arrays of length 1 and 2.
//  - What do you return if there is no majority but there is a pluraity
//    number?



// Test Cases:

console.log(findMajority([6, 4, 4, 6, 4]) === 4);
console.log(findMajority([4, 5, 2, 5, 5, 5, 1]) === 5);
console.log(findMajority([1, 2, 1, 2, 2, 1, 2]) === 2);
console.log(findMajority([1, 2, 3, 1, 4, 4, 1, 1]) === 1);
console.log(findMajority([5, 5, 5]) === 5);

// All test cases should log true


// Data Structures: 

// To calculate the majority number, for each unique integer you need to
// count the number of occurrences in array and associate that count with
// the integer so you need a object to store these associations.

// Algorithm - Naive Approach:

// 1. Loop through the array of integers.
// 2. For each integer check if integer exists in object.
//    a. If exists, then increment count for that integer;
//    b. if does not exist, then add to object with value of 1.
// 3. Find the maximum number of Object.values(obj).
// 4. Use the max as index argument to 
//    Object.keys(obj).indexOf(Math.max(Object.values(obj)))
// 5. Make sure to explicit type convert into number primitive.
// 6. Return this as the majority number if greater than or equal to array
//    length divided by 2, otherwise return null.

// Implementation - Naive Approach:

function findMajority(arr) {
  let obj = {};
  for (let i = 0; i < arr.length; i++) {
    obj[arr[i]] = (obj[arr[i]] || 0) + 1;
  }
  let max = Math.max(...Object.values(obj));
  let index = Object.values(obj).indexOf(max);        
  let result = Number(Object.keys(obj)[index]);
  return (max >= (arr.length / 2) ? result : null);
}

// Note that this implementation of time complexity of O(n).