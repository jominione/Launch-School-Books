// In this assignment, we'll challenge you with a variation of the well-known 
// "Two Sum" problem. Try solving it independently using the PEDAC approach 
// we've covered in previous assignments. If you find yourself stuck after 
// an hour, feel free to reference our walkthrough. Once you have the solution, 
// reverse-engineer it to ensure you understand it fully. In a few days, 
// attempt to solve the problem again without looking at the answer. This 
// strategy will help with all the remaining practice problems.

// Problem:

// Given a list of numbers,
// find two numbers in the list that add up to ten
// and return them. If no such pair exists, return null.

// It is guaranteed that there is either exactly one pair of numbers
// that satisfies the condition, or no pairs at all.

// Rules:
//      Explicit Requirements:
//        - Given a list of numbers, contains two numbers that sum to 10.
//        - If no combination exists, return null.
//        - There will be either one pair or no pair.

//      Implicit Requirements:
//        - From test cases, numbers are integers and can be negative.
//        - There will be at least two numbers in a list.
//        - Function is pass-by-value i.e. no mutation of input data.

// Input:
//  - Array of integers.

// Output:
//  - Array of two integers that sum up to 10 or null.


// Questions:
// - Is empty array or array with single element a valid input?
// - Does the order of results array matter?

// Data Structures: 

// Both input and output data structure are arrays.



// Algorithm:

// 1. Outer loop - Iterate through input list and use integer as first value
// in sum operation.
// 2. Inner loop - Iterate through input list starting from index of outer
// loop + 1 as ssecond element in sum operation.
// 3. Use conditional to check if sum of first and second element equals 10.
// If true, insert both integers into result array and return result array.
// 4. Else continue iteration unless return a valid pair or if complete
// iteration return null.

// Implementation:

function findPair(arr) {
  let result = [];
  for (let i = 0; i < arr.length - 1; i++) {
    for (let j = i + 1; j < arr.length; j++ ) {
      let sum = arr[i] + arr[j];
      if (sum === 10) {
        result.push(arr[i], arr[j]);
        return result;
      }
    }
  }
  return null;
}

// Has a time complexity of O(N^2).

// Test Cases:

console.log(findPair([2, 3, 9, 7])); // Output: [3, 7]
console.log(findPair([10, 6, -1, 2])); // null
console.log(findPair([1, 2, 5, 6])); // null
console.log(findPair([1, 3, 6, 10, 4, 5])); // [6, 4]
console.log(findPair([4, -5, 3, 15, 5])); // [-5, 15]